package com.mideye.db.jdc;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JDCConnection implements Connection
{
	private static final Logger logger = LoggerFactory.getLogger(JDCConnection.class);
    private final JDCConnectionPool pool;
    private final Connection conn;
	private boolean inuse;
    private long timestamp;


    public JDCConnection(Connection conn, JDCConnectionPool pool) {
        this.conn=conn;
        this.pool=pool;
        this.inuse=false;
        this.timestamp=0;
    }

    public synchronized boolean lease() {
       if(inuse)  {
           return false;
       }
       
	   if (validate()) {
          inuse=true;
          timestamp=System.currentTimeMillis();
          return true;
	   }
	   return false;
    }
    public boolean validate()
    {
    	try
    	{
            conn.getMetaData();
        	return true;
        }
    	catch (SQLException e)
    	{
    		logger.warn("Could not validate SQL connection", e);
    		return false;
    	}
    }

    public synchronized boolean inUse() {
        return inuse;
    }

    public long getLastUse() {
        return timestamp;
    }

    public void close() {
    	
        logger.trace(">>> ENTER");
    	pool.removeConnection(this);
    	try
    	{
    		conn.close();
    	}
    	catch(SQLException e)
    	{
    		logger.warn("Problem closing the connection, " +
    				"but since its no part of the pool any longer we ignore the exception", e);
    	}
    	finally
    	{
    		logger.trace("<<< EXIT");
    	}
    }

    protected synchronized void expireLease() {
        inuse=false;
    }

    protected Connection getConnection() {
        return conn;
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return conn.prepareStatement(sql);
    }
    
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)throws SQLException {
    	return conn.prepareStatement(sql, autoGeneratedKeys);
    }
    
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    	return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }
    
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return conn.prepareStatement(sql, columnIndexes);
    }
    
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,int resultSetHoldability)
    throws SQLException {
        return conn.prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
    }
    
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    	return conn.prepareStatement(sql, columnNames);
    }

    public CallableStatement prepareCall(String sql) throws SQLException {
        return conn.prepareCall(sql);
    }
    
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    	return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
    }
    
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    	return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public Statement createStatement() throws SQLException {
        return conn.createStatement();
    }
    
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
    	return conn.createStatement(resultSetType, resultSetConcurrency);
    }
    
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    	return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    public String nativeSQL(String sql) throws SQLException {
        return conn.nativeSQL(sql);
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        conn.setAutoCommit(autoCommit);
    }

    public boolean getAutoCommit() throws SQLException {
        return conn.getAutoCommit();
    }

    public void commit() throws SQLException {
        conn.commit();
    }

    public void rollback() throws SQLException {
        conn.rollback();
    }
    
    public void rollback(Savepoint savepoint) throws SQLException {
    	conn.rollback(savepoint);
    }
    
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    	conn.releaseSavepoint(savepoint);
    }

    public boolean isClosed() throws SQLException {
        return conn.isClosed();
    }

    public DatabaseMetaData getMetaData() throws SQLException {
        return conn.getMetaData();
    }

    public void setReadOnly(boolean readOnly) throws SQLException {
        conn.setReadOnly(readOnly);
    }
  
    public boolean isReadOnly() throws SQLException {
        return conn.isReadOnly();
    }

    public void setCatalog(String catalog) throws SQLException {
        conn.setCatalog(catalog);
    }

    public String getCatalog() throws SQLException {
        return conn.getCatalog();
    }

    public void setTransactionIsolation(int level) throws SQLException {
        conn.setTransactionIsolation(level);
    }

    public int getTransactionIsolation() throws SQLException {
        return conn.getTransactionIsolation();
    }

    public SQLWarning getWarnings() throws SQLException {
        return conn.getWarnings();
    }

    public void clearWarnings() throws SQLException {
        conn.clearWarnings();
    }
    
    public void setHoldability(int holdability) throws SQLException {
    	conn.setHoldability(holdability);
    }
    public int getHoldability() throws SQLException {
    	return conn.getHoldability();
    }
    
    public Savepoint setSavepoint()throws SQLException {
    	return conn.setSavepoint();
    }
    
    public Savepoint setSavepoint(String name) throws SQLException {
    	return conn.setSavepoint(name);
    }
    
    public void setTypeMap(Map<String,Class<?>> map) throws SQLException {
    	conn.setTypeMap(map);
    }
    
    public Map<String,Class<?>> getTypeMap() throws SQLException {
    	return conn.getTypeMap();
    }
    
    // Unimplemented methods

	public Array createArrayOf(String typeName, Object[] elements) throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public Blob createBlob() throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public Clob createClob() throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}
	
	public Struct createStruct(String typeName, Object[] attributes) throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public Properties getClientInfo() throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public String getClientInfo(String name) throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public boolean isValid(int timeout) throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}

	public <T> T unwrap(Class<T> iface) throws SQLException
	{
		throw new UnsupportedOperationException("Method not implemented");
	}
}
